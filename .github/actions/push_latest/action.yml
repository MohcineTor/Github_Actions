name: Push Image to Azure Container Registry
description: Push image to Azure Container Registry
inputs:
  simulator_image_docker_or_listofImages:
    description: 'User should input either a Docker image of the simulator or a list of images Ex:"simulator_simulator, asset_simulators ..."'
    required: true
    default: ''
  simulator_version_or_listofVersions:
    description: 'User should input either the version of the simulator or a list of versions Ex:"ASSET_v14.2.1, ASSET_v15.0.1 ..."'
    required: true
    default: ''
  platform_or_listofPlatforms:
    description: 'User should input either a single platform or a list of platforms to initialize Ex: "dev, perf, staging ...."'
    required: true
runs:
  using: "composite"
  steps:
    - name: Push to ACR simulator image
      run: |
        IFS=',' read -ra platforms_array <<< "${{ inputs.platforms }}"
        IFS=',' read -ra list_of_images_simulator <<< "${{ inputs.simulator_image_docker_or_listofImages }}"
        IFS=',' read -ra list_of_version_simulator <<< "${{ inputs.simulator_version_or_listofVersions }}"

        length_platforms=${#platforms_array[@]}
        length_list_images_simulator=${#list_of_images_simulator[@]}
        length_versions_simulator=${#list_of_version_simulator[@]}

        if [ $length_platforms -eq 1 ] && [ $length_list_images_simulator -eq 1 ] && [ $length_versions_simulator -eq 1 ]; then
            echo "Push images_simulator: $list_of_images_simulator:$list_of_version_simulator in $platforms_array"
        else
            for platform in "${platforms_array[@]}"; do
                if [ "$platform" != "${{ env.PLATFORM_ID }}" ]; then
                    docker images > ${PWD}/docker_images_logs.txt
                    LOG_FILE=${PWD}/docker_images_logs.txt
                    extract_repositories_and_tags() {
                        while IFS= read -r line; do
                            repository=$(echo "$line" | awk '{print $1}')
                            tag=$(echo "$line" | awk '{print $2}')
                            for image in "${list_of_images_simulator[@]}"; do
                                for verison in "${list_of_version_simulator[@]}"; do
                                    cleaned_image=$(echo "$image" | sed 's/ *//g')
                                    cleaned_version=$(echo "$verison" | sed 's/ *//g')
                                    if [ "$repository:$tag" == "$cleaned_image:$cleaned_version" ]; then
                                        echo "push images: $cleaned_image:$cleaned_version in $platform"
                                    fi
                                done
                            done
                        done < "$LOG_FILE"
                    }
                    extract_repositories_and_tags
                fi
            done
        fi
      shell: bash