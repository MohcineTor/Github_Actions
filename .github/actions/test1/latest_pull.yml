name: Pull Image from Azure Container Registry
description: Pull image from Azure Container Registry
inputs:
  folder:
    description: 'Working-dir folder'
    required: true
    default: 'personal'
  simulator_image_docker_or_listofImages:
    description: 'User should input either a Docker image of the simulator or a list of images Ex:"simulator_simulator, asset_simulators ..."'
    required: true
    default: ''
  simulator_version_or_listofVersions:
    description: 'User should input either the version of the simulator or a list of versions Ex:"ASSET_v14.2.1, ASSET_v15.0.1 ..."'
    required: true
    default: ''
  platform_or_listofPlatforms:
    description: 'User should input either a single platform or a list of platforms to initialize Ex: "dev, perf, staging ...."'
    required: true
runs:
  using: "composite"
  steps:
    - name: Pull from ACR simulator image
      run: |
        cd ${{ inputs.folder }}
        
        IFS=',' read -ra platforms_array <<< "${{ inputs.platform_or_listofPlatforms }}"
        IFS=',' read -ra list_of_images_simulator <<< "${{ inputs.simulator_image_docker_or_listofImages }}"
        IFS=',' read -ra list_of_version_simulator <<< "${{ inputs.simulator_version_or_listofVersions }}"

        length_platforms=${#platforms_array[@]}
        length_list_images_simulator=${#list_of_images_simulator[@]}
        length_versions_simulator=${#list_of_version_simulator[@]}

        if [ $length_platforms -eq 1 ] && [ $length_list_images_simulator -eq 1 ] && [ $length_versions_simulator -eq 1 ]; then
            babylon azure acr pull -c ${{ env.CONTEXT_ID }} -p $platforms_array --image ${{ inputs.simulator_image_docker_or_listofImages }}:${{ inputs.simulator_version_or_listofVersions }}
        else
            for platform in "${platforms_array[@]}"; do
                cleaned_platform=$(echo "$platform" | sed 's/ *//g')
                if [ "$cleaned_platform" == "${{ env.PLATFORM_ID }}" ]; then
                    babylon azure list -c ${{ env.CONTEXT_ID }} -p $platform > ${PWD}/babylon_acr_logs.txt
                    LOG_FILE="${PWD}/babylon_acr_logs.txt"
                    extract_repositories_and_versions() {
                        while IFS= read -r line; do
                            if [[ $line == *"•"* ]]; then
                                repository=$(echo "$line" | cut -d ":" -f 1 | sed 's/•//g' | tr -d '[:space:]')
                                tag=$(echo "$line" | cut -d ":" -f 2 | sed 's/^[[:space:]]*//' | sed "s/^\['//" | sed "s/^\']//")
                                for image in "${list_of_images_simulator[@]}"; do
                                    cleaned_image=$(echo "$image" | sed 's/ *//g')
                                    if [ "$cleaned_image" == "$repository" ]; then
                                        IFS=', ' read -r -a tag_array <<< "$tag"
                                        for version in "${tag_array[@]}"; do
                                            tag_log=$(echo "$version" | sed 's/[]]//' | sed "s/^'//" | sed "s/'$//")
                                            for tag_user in "${list_of_version_simulator[@]}"; do
                                                cleaned_tag=$(echo "$tag_user" | sed 's/ *//g')
                                                if [ "$cleaned_tag" == "$tag_log" ]; then
                                                  babylon azure acr pull -c ${{ env.CONTEXT_ID }} -p $cleaned_platform --image $cleaned_image:$cleaned_tag
                                                fi
                                            done
                                        done
                                    fi
                                done
                            fi
                        done < "$LOG_FILE"
                    }
                    extract_repositories_and_versions
                fi
            done
        fi
     shell: bash