name: Pull Image from Azure Container Registry
description: Pull image from Azure Container Registry
inputs:
  platform_or_listofPlatforms:
    description: 'User should input either a single platform or a list of platforms to initialize Ex: "dev, perf, staging ...."'
    required: true
  simulator_image_docker_or_listofImages:
    description: 'User should input either a Docker image of the simulator or a list of images Ex:"simulator_simulator, asset_simulators ..."'
    required: true
    default: ''
  simulator_version_or_listofVersions:
    description: 'User should input either the version of the simulator or a list of versions Ex:"ASSET_v14.2.1, ASSET_v15.0.1 ..."'
    required: true
    default: ''
  tags_or_list_of_tags:
    description: 'User should input either a single tags or a list of tags Ex: "[ASSET_14.2.1], [ASSET_14.2.2], [ASSET_14.2.3]...."'
    required: true
    default: ''
runs:
  using: "composite"
  steps:
    # - name: Checkout de la repo externe
    #   uses: actions/checkout@v2
    #   with:
    #     repository: MohcineTor/Test_Github_Action 
    #     ref: main 

    - name: Pull from ACR simulator image
      env:
        logs: ${{ github.repository }}/log.txt
      run: |
        echo ${{ github.repository }}
        echo ${{ github.repository_owner }}
        echo ${{ github.action_path }}
        # echo ${{ github.workspace }}
        # echo ${{ github.action_repository }}
        # echo ${{ github.workflow_ref }}

        IFS=',' read -ra platforms_array <<< "${{ inputs.platform_or_listofPlatforms }}"
        IFS=',' read -ra list_of_images_simulator <<< "${{ inputs.simulator_image_docker_or_listofImages }}"
        IFS=',' read -ra list_of_version_simulator <<< "${{ inputs.simulator_version_or_listofVersions }}"
        IFS=',' read -ra list_of_tags <<< "${{ inputs.tags_or_list_of_tags }}"

        length_platforms=${#platforms_array[@]}
        length_list_images_simulator=${#list_of_images_simulator[@]}
        length_versions_simulator=${#list_of_version_simulator[@]}
        length_tags=${#list_of_tags[@]}

        if [ $length_platforms -eq 1 ] && [ $length_list_images_simulator -eq 1 ] && [ $length_versions_simulator -eq 1 ] && [ $length_tags -eq 1 ]; then
            echo "pull images_simulator: $list_of_images_simulator:$list_of_version_simulator in $platforms_array"
        else
            for platform in "${platforms_array[@]}"; do
                cleaned_platform=$(echo "$platform" | sed 's/ *//g')
                if [ "$cleaned_platform" == "${{ env.PLATFORM_ID }}" ]; then
                    LOG_FILE=$logs
                    extract_repositories_and_versions() {
                        while IFS= read -r line; do
                            if [[ $line == *"•"* ]]; then
                                repository=$(echo "$line" | cut -d ":" -f 1 | sed 's/•//g' | tr -d '[:space:]')
                                tag=$(echo "$line" | cut -d ":" -f 2 | sed 's/^[[:space:]]*//' | sed "s/^\['//" | sed "s/^\']//")
                                for image in "${list_of_images_simulator[@]}"; do
                                    cleaned_image=$(echo "$image" | sed 's/ *//g')
                                    if [ "$cleaned_image" == "$repository" ]; then
                                        IFS=', ' read -r -a tag_array <<< "$tag"
                                        for version in "${tag_array[@]}"; do
                                            tag_log=$(echo "$version" | sed 's/[]]//' | sed "s/^'//" | sed "s/'$//")
                                            i=0
                                            for tag_user in "${list_of_version_simulator[@]}"; do
                                                cleaned_tag=$(echo "$tag_user" | sed 's/ *//g')
                                                index=$i
                                                if [ "$cleaned_tag" == "$tag_log" ]; then
                                                  echo "pull images_simulator: $cleaned_image:$cleaned_tag in $cleaned_platform"
                                                  echo "pull nginx images ...."
                                                  docker pull cleaned_image:cleaned_tag > /dev/null 2>&1
                                                  docker tag cleaned_image:cleaned_tag $repository:$(echo ${list_of_tags[$index]} | sed 's/ //g')
                                                fi
                                                i=$((i + 1))
                                            done
                                        done
                                    fi
                                done
                            fi
                        done < "$LOG_FILE"
                    }
                    extract_repositories_and_versions
                fi
            done
        fi
      shell: bash